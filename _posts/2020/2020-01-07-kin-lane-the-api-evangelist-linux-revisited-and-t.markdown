---
title: "Kin Lane the API evangelist, Linux revisited, and the lost story of Wolfenstein "
layout: podcast
created_at: 2020-01-07 15:00:00 UTC
author: ""
categories: podcast theweeklysqueak
podcast: "The Weekly Squeak"
tags: 
orig_url: https://anchor.fm/theweeklysqueak/episodes/Kin-Lane-the-API-evangelist--Linux-revisited--and-the-lost-story-of-Wolfenstein-ea1h29
podcast_embed: https://anchor.fm/s/2ab8734/podcast/play/9536009/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2020-01-07%2Febded7bb0450479137c182944cda92df.m4a
image: 347957-1578383864205-3fb9c78716a15.jpg
permalink: /:categories/:title/
transcript: true
---
In this episode I speak with the infamous Kin Lane, the API evangelist, now working with Postman. I also cover my new experiences with the Linux desktop, how "the rise of skywalker" has visions of our dystopian future, and more!

- [chrischinchilla.com/contact](https://chrischinchilla.com/contact)
- [kinlane.com](http://kinlane.com/)
- [getpostman.com](https://www.getpostman.com/)

## Transcript

SPEAKER: M1
Welcome to the weekly squeak your weekly geeky squeak with me. Christine Schiller and it is two thousand and twenty I took a little bit of a break for a couple of weeks. Hope that was okay with you. I had a good little break actually. And I caught up with editing some interviews so interview for this episode is going to be with Kim Lane the API evangelist or ex slash current API evangelist. But specifically now the evangelist for postman a tool which developers used to model API is. And if you don't know what an API is. Well actually the interview will help you understand a little bit. But it's sort of a common way that applications communicate with each other. You probably use them all the time when you use applications without realizing. And he has been famous as the API evangelist for some time and now he's working with postman a very popular tool in that space. So I have an interview with him later from late last year. First though I will kick off with my links and actually first a couple of articles I wrote I didn't really do a sort of roundup of 2019 2019. I just never really got round to it and now it kind of feels too late to do it. To be honest but I do have one predictions post currently on D own. Published actually on New Year's Eve. My predictions for what will happen in open source. So if open source is your thing then take a look see if you agree with me and let me know in the comments on the article. There's a few controversial ones there a few less controversial ones so please do let me know. And let's see what happens in a little under three hundred sixty something days. Also late last year an article that was posted up on D own that I didn't quite get to really promote but it's already been quite popular with a lot of comments as I was expecting. This was me having another experiment with Linux the next desktop and well how I got along really. To be blunt and and I guess the summary and there's going to be a part two was more on Linux on the desktop has got a lot better but what annoyed me and it's something that actually annoys me with a lot of developer tools and let's face it whilst Linux is not necessarily completely meant for developers is used by a lot of developers and created mostly by developers and one thing that developers have a tendency to do is assume and say that something is simple when it isn't. And that is actually the thing that bothered me the most I encountered lots of new Linux desktop distributions that I was interested to try and do try where they say they're just simple just do this just do that and that's not the case. And quite often you have installation issues you have compatibility issues even before you start using. And this is what annoyed me the most. Be honest with people don't say that something is simple when it isn't. And that was my main issue. But those aside actually things are getting better and I will start digging further in my follow up posts coming soon. But if you want to see the first one and maybe add some comments there. If you agree or disagree then please do over on his own as well. I think in the show it's quite a grab bag of assortments of links from other locations in this episode. First an interesting although entertaining I think is a better word for this post on Yanco design by stretchy Mitra. This is meat meet the unnecessary designs that are taken Internet by storm. Part two because there was a part when you see a link to part 1. This this is a post about Matt Benedetto the creator of the unnecessary inventions page on Instagram where he posts photos of well as the name says it unnecessary designs or unnecessary inventions and there's some great pictures here. The bubble wrap had a blank on the thought it was called the bubble wrap rolling popping machine that you mount on your belt which looks callow it a mass epaulets hold a box that also charges a case that could be some useful or the hey you know which ones are paired with each other. I'm not sure Lego shoes for picking up Lego blocks as you tread on them and a Clipper ball toilet roll dispenser for mopping up tears sponges for your tears I don't know how this works with glasses wearers but anyway and a mass scroll and Tapper for Instagram and things like that feeds and maybe going along with people are also a fan of Instagram a four thick synchronized nail clipper a Get a backpack holder thing a chip sucker wrapper a giant air pods and a bath mat of Mark Zuckerberg. There you go. Actually some wonderful photos. God knows how people ever come across these inventions or create them in the first place. Probably just so they end up on a blog.
SPEAKER: M8
But if you need a little bit of light entertainment then take a look next.
SPEAKER: M1
An increasingly popular blog for me to follow. By Colin Campbell on polygon the man who made Wolfenstein not Wolfenstein 3D. This is actually interesting and the article goes into detail of Wolfenstein 3D which essentially borrowed the original Waterfront Stein from Silas Warner paying him a very paltry sum of 5000 dollars to then create the version that I guess became much more commercially successful and Silas was a very well known in gamer circles for his original creation but was a typical developer in that he didn't really market it very well and when offered five thousand dollars he thought that was a good deal. And of course probably that in his life realized it wasn't but it was somewhat too late by then. It reminded me a lot of oh so many posts. I suppose the creator of the original Monopoly. I think I covered this in a previous episode where something similar happened to them. Someone comes along gives them a paltry sum for their invention. Also the creator of what inspired M S DOS Microsoft also paid a paltry sum too. Etc etc. History is littered with examples of this. Unfortunately this is just another one. If you're a fan of Wolfenstein either version then take a look and is unfortunately now dead so he can't really be recompensed for his work but he does leave a widow who is actually kind of fighting his corner right now. So maybe there is a way to help her out at the very least. Next an article on vice from Jason Kobler cobbler Kobler. Depends if he's pronouncing it generally I guess this is a strange title. The rise of Skywalker is a preview of our DRM fueled dystopian future. Now if you haven't seen the latest Star Wars film firstly I probably would say Don't bother I didn't actually think it was that great. Frankly I actually prefer cats and shoot me down for saying that. Feel free to let me know how wrong or right I am Christian at dot com slash contact and happy to have a discussion. But anyway there's one scene in it spoiler alert where C 3.0 has been able to translate some essential text from Sith a forbidden language. Here's a translator robot that is on it's not allowed to translate a forbidden language so he has to be hacked into and reset to enable this vital plot to continue. And the author of this article claims that it's an example of a dystopian DRM fueled future. Little bit click. But it's kind of an interesting valid point of the extremities that could happen if we let DRM rule our world. I would actually probably argue that DRM has become less of an issue than it was in the past. Streaming is is a kind of hold out for it. But streaming is different from many other things and how you would DRM sent parts of a robot etc.. I don't if DRM is even the right word for what is being described in this scene. But I guess the potential dystopian future of too much control over things you need to access is maybe an interesting perspective on it. Instead so yeah I feel like the article is a little ridiculous but maybe the point it's posing is an interesting one. If you could think of anything else anything else dystopian that could be created by over control and over protection on digital devices is it already happening. What's an extreme case it could happen. Could you imagine a book around this kind of dystopian level of control. Let me know as always the dot com slash contact. Next an article on medium by John Samuel. Just on John Samuels own personal account could rethinking the command line. This was a post I found interesting from a sort of you ex perspective. The command line is popular in certain fields as a way of interacting with a computer. It's very efficient but requires actually remember this when I studied what was then called Human Computer Interaction that having to remember commands is the most efficient way of using a computer. But of course it requires a certain level of understanding to better understand those in the first place which is often difficult. And this article goes into some thoughts and this is from about 6 months ago. It goes into some thoughts on how that could be improved with more intelligent completions and things like that. There are partial completions but it's a bit inconsistent. As with many kinds of developer tools vs. My comments on Linux earlier as well. Sometimes these things inconsistent. Depends if someone has implemented them quite often on command and they haven't. So how could we make the command line as powerful but more user friendly. It's interesting the post doesn't really go that deep into it and I would challenge that if any of this will actually happen and some shells which are kind of your options for interacting with a command line like fish and z s h do this a little bit to a certain extent. Better than some other types of shells. But there is this barrier to entry that I think sometimes is almost intentional. I guess the shell gives you a lot of power. And from the famous Spider Man line with great power comes great responsibility. Maybe putting that barrier to entry means that people can do less damage to their machine a setup as well. That could be argued that's an intentional design decision but I'm not sure if that really is the case or not anyway if your a regular interacted with the command line would be interested to see how it could change then and have a read of the post. And finally this was from a month or so ago but I never really got round to mentioning it on the podcast. This was an article I will Kelly on open source dot com could hiring a technical writer in the age of dev ops. This is an article that argues that technical writers something true to my heart should have a more prominent role in dev and be more a part of the dev ops process which I see a lot of teams trying to do and failing or succeeding with different levels of success but should be more embedded in that. Develop a workflow I guess and there are many ways you can do this. I think this would be an interesting article to get on to you write the docs podcast. Maybe you will talk to Will or whoever he interviewed in the article and go into some more detail on this. Incidentally there was an episode of the the docs podcast as well just published just in the New Year. I wasn't on it because I was away but it was speaking with Alan who maintains or maintains but is a as a moderator of the read its technical writing separate which was a very interesting interview. Shame I did not get to take part but you will enjoy it nonetheless.
SPEAKER: M2
And now as I mentioned earlier is my interview with Kim Lane now of placement. Enjoy.
SPEAKER: M3
My name is Kim Lane and chief of Angeles set. Postman also probably known as the gay evangelist covering the technology business and politics of API since July 2010. So just join post man blast in the last couple months. Not much is changing for me.
SPEAKER: M4
I'm still doing what I do but I really get a lot more traction because I now have a tool that developers love and it's very relevant in the space where before it is pretty academic consulting strategy and just API blah blah blah.
SPEAKER: M8
Well actually I would might know you a little bit more about what you did there because the API evangelist could go many different ways. I'm assuming it was probably a mixture of kind of client work as well as blogging a lot. Presentations that kind of thing. Yeah. What what did you actually do as the API evangelist. What what did that even mean to API is I suppose yeah.
SPEAKER: M5
I mean it was definitely it's been definitely a long journey. And so I mean I'm I'm an engineer and started as an engineer but I was. An executive running a SJP events and I ran Google events as well ran Google I O and developer days for a couple of years and I just kind of saw the potential of the cloud and mobile at that time and I started.
SPEAKER: M6
I didn't want to be an executive anymore. I wanted to be getting my hands dirty doing things but I wasn't quite sure what was going on with this whole API thing in the first couple of years I tried being the evangelist for a couple different API is specifically a print one in New York and. Its business directory one in San Diego or actually in Hollywood and. That just didn't really feel right. So I just started kind of studying the API in general and the business of API is at that time because 2011 12 that was very much the age of Apogee mash 3 and 3 scale and it was all you know really where the money was at. With venture capital wise and discussion wise was was how do you know how do you manage guys how do you launch a portal. How do you publish your docs. How do you rate limit. And generate revenue from your guys. Because everyone's going to launch the next Twitter and be the next next whatever. And so I just started studying that business of API is and talking about how do you create products and develop these new new new lines of business using API and come the next Twilio and the next stripe.
SPEAKER: M4
And all of that and along the way I kind of saw that a lot of it wasn't very technical and was the business is very important but there's actually a lot of politics going on when it comes to venture capital. When it comes to open data and all of that and it led to me going to Washington DC and doing a one year fellowship as a presidential innovation fellow doing open data and API eyes and then I started an event called API strategy and practice with three scale and we ran that for nine events and then we gave it to the Linux Foundation and so I don't I didn't dub myself the API Angeles other people just saying that I didn't have an API behind me.
SPEAKER: M6
They were like keys know what to call him. He's the API Evangelist I guess.
SPEAKER: M4
And and then I just spent the next five six years just studying talking to people startups all the way up to enterprise. Government agencies I've come over to Europe and work with banks and the European Commission and other government agencies trying to help figure out this whole API thing and what's going on. So and then no postman helped postman since early days and bananas our CEO and I really get along and we kind of see this face in similar ways and so we just he wants to invest in me and I want to invest in them because I really believe what they do for developers. And so here I am. I mean I'm just really my focus is trying to understand all of this and try to be as honest about it and not have always the vendor bend to what I'm trying to say and not be venture I guess capital led and what I'm saying and try to be a little more honest about the realities of what's happening in enterprise and people seem to appreciate it.
SPEAKER: M8
Would it be fair to maybe say or hypothesize that the API evangelist isn't needed so much anymore because people kind of get it and it's a bit more established procedure Yeah I would I would I would stand by that.
SPEAKER: M3
I feel like that's there and there's there's plenty of advocates and evangelists and I would say that's the only thing that's changed since 2010 is businesses. It's mainstream businesses it's not the Twitter ales and stripes and those that I'm talking to its insurance companies and banks and health care companies and I wouldn't say everybody gets it but there's enough information out there and there's enough pundits and there's enough knowledge that yeah.
SPEAKER: M6
I don't I definitely don't think I'm as needed as I used to be.
SPEAKER: M8
What attracted you to postmen over some of the other options you mentioned. Or others that are also available that you could have also probably become an evangelist for if you'd wanted to. What attracted you specifically to postman.
SPEAKER: M4
I mean if you followed my work at all. It's very hard to please I'm very picky about what the startup is doing and how they're serving. And I'm I get really frustrated by a company's over promising under delivering. Man I would say ethically I am in alignment with the CEO and the CTO. I know them personally. I know what they believe. The tool itself is very beloved by developers developers. It's everywhere. When I was doing enterprise consulting over the last two or three years I was doing a lot of going into enterprise organizations doing workshops government agencies healthcare insurance and I would ask people what are they using. Postman Always was was a tool that came up and I would ask people to raise their hand. How many people are using postmen. Everyone uses postmen. And so it's just a very ubiquitous tool that developers love and it makes their life easy easier. So I really believe in that and I want to try to you know be part of that because I've had other tools that were similar and then they get gobbled up and acquired and they go away and that makes developers sad and that makes me sad. So not that that you know I'm pretty confident that's not going to happen with postman but I also want to be along for the ride to be a be a voice to help steer steer that to make sure developers are our front and center in our journey. And what's happening is I think it's an important tool. It's important enough for me to be there and be a voice as it grows and as it evolves and make sure it stays stay as a developer tool.
SPEAKER: M1
What would you say your your favorite three features postman are and why I guess.
SPEAKER: M4
Well one the unit of value the core unit of value of postman is the request being able to make an eight CTP 1 1 request and tailor that request and see the details of that response see the headers see the raw response see the pretty response that unit of value the request is is it's what what this is all about for everybody. So that's the number one thing that I. Why post my matters and that's the feature every developer uses postman for to being able to save that request as a collection. That's that collection be able to save that. Craft. That request exactly as you want save it at the properties and parameters as you want and then share that with someone by your l or by a teams or otherwise and have it have the same meaning when you give it to another developer or another business unit or or even another group in another country. I mean that's to be able to. Craft a collection in Seattle and then have it mean the same thing in television. You know that that following evening as they come online is powerful because that transcends cultural language you know it just sticks it means something. So. So collections are really powerful and I think really important as far as what we're doing. Third I would say environments because you can abstract away variables key value pairs from those collections from those requests so you can have one collection that you can run in multiple contexts depending on what keys I have in those variables or what values. So I can create a you know the same shopping cart order. Collection. That. Looks for product adds to the car checks out and pays for it and then gets the invoice that that environment lets me do that in three different countries where three different products. But it's the same underlying collection being run. But the environment brings that that lack context and then it allows you to abstract the way your keys and your secrets and get a little bit more organized about how you manage your secrets across your eight year API usage which I'm pretty confident most organizations don't have a strategy for. How developers manage their tokens and keys and all of that good stuff. So yeah request collections environments are the three fundamental units of value for four postmen for me and then all the rest is kind of supportive and ancillary to that. Docs mocks deaths all of that but those three units key units are really where the rubber meets the road for me.
SPEAKER: M8
You gave me quite a nice Segway there for the next question. Based on the I think you said about eight to 10 years of experience evangelizing and consulting on API is what what would be your kind of best tips for API strategy especially a suppose based around what you've seen. People get get wrong or not get as right as they could. Many times in the past.
SPEAKER: M9
Well I mean keep it simple.
SPEAKER: M4
That's why rest api eyes are so important and as appealing as hyper media graph. Q L GOPAC Costco web sockets all the other valuable approaches to API is in a tool box those are very useful starting with with simple web API eyes that use ATP 1 1 and R.
SPEAKER: M9
Are simple designs.
SPEAKER: M4
That's the piece that I think most organizations Miss is rather than getting a handle on all of their digital capabilities using basic web API. They're off to the next whatever whatever the next cool thing is either develop or leg because it's just cool and shiny or vendor led because the vendor tells you it's something you ought to buy from them. I see too many organizations who are just getting a handle on the web API thing. Off to the next race and you need to get better at. Documenting communicating iterating upon the simple web API designs. I mean I would say get a handle on the versioning you know the evolution of your digital capabilities before you really chase anything else. And if you can get that that core piece where you're defining designing deploying and then iterating upon all of your organizational capabilities consistently across teams. If you're doing that version after version then now that you know then then you can start thinking about about broadening that but keep it simple. Don't don't don't get distracted and really that team communication. Doing it well at scale not just one team being able to consistently deliver documentation so it looks the same across all teams and you know API design across teams.
SPEAKER: M8
You can do that you're there you're doing it well what do you think people do get so distracted by the new alternatives I mean a couple of years ago it was graph QoL which is still popular but now I have heard increasing people amount of people talk about GOPAC as well. Do you think maybe that sometimes sort of HDP based API is all just so simple and that gets kind of boring for developers. That's all it is or are there actual other technical reasons that people have switched to those newer ideas.
SPEAKER: M4
Yeah I mean GOPAC it's very much performance. Basketball is very much having a large schema and and being able to manage that schema and is that effectively deliberate as part of the UI up a process.
SPEAKER: M3
So there are reasons but I don't think everyone thinks through those reasons and that's only weighs them as well as they should. Win win win.
SPEAKER: M4
So yeah I think boredom shiny new object. I think not understanding. I think a lot of people don't understand the nuance of good API design and just good API design. The document you know Dallas stops along the lifecycle documenting it well making just code libraries code samples. It can serve as good examples and things are consistently design. I just don't think people care at that level. Tom to learn and so they're like oh grass cool totally makes more sense. It's way more intuitive than the rest. Well learn a good restful designer. You know gone down through the maturity levels and know well that's why you don't understand it and so I know. I like Rafael. I liked the RPG I see the potential I see the reason I get event driven pub Southern I get all of that. But I don't think people are very good at thinking through the problem. And then looking in their tool box with a pragmatic kind of thoughtful lie as far as what what tools the right one to apply to this. They tend to just be bored and want to learn that new thing and and that sounds exciting. So let's do that. That seems cool and they don't think about the technical debt or what's going to happen down the road when they get bored again and want to jump to the next shiny thing who's got to own that you know there's always some some of us who have to exploit on that and maintain it.
SPEAKER: M8
And I mean postmen as far as I'm aware is mostly optimized anyway for the kind of prototyping and development of API is generally then not used for actually creating the final API and in the end I guess maybe some people do it. But what would you say is some of the tools that you have seen that help people get them into production. The best ways or most web frameworks and most kind of back end frameworks pretty pretty well equal these days.
SPEAKER: M4
Yeah that's a that's a really tough one. I would say that is definitely perpetually and persistently the the the. Hardest stop of the API lifecycle of never landed on the home page of API. I have what I consider like 100 stops along maybe lifecycle from defined to deprecation and deploying your API. I mean back in the 2011 12 when I first started. People go well which which API provider mastery RPG or 3 scale should I use it deploy my API not. None of them deploy your API you call your API and then still very true there's not a lot of just not one clear winner when it comes to deploying your API. As you said postman Boseman won't deploy your API you can you can market and you can get pretty close so you can design mock and you can set up your tests and and have it mimicking but you can't actually deploy your API. Now I'm building a few concepts for taking that collection and deploying it to Amazon and Azure Google but really this comes down to the many different ways in which people deploy their API infrastructure and there's not one common way of doing it. So when you approach an organization you know they're using one language they're using another framework they're using a mix of gateways that were sold to them by various vendors and so trying to nail that down and say here's here's how you get prescriptive about deploying your API or best standards. It's just really tough man. Then you got server lists coming out you know you got the resurgence of gateways you know gateways for helping not just manage but also deploy your API. But you know that words interchangeable you know like Kong and engine X and these won't actually help you deploy your API stuff to deploy them. They're very much management but AWOL API Gateway you can actually deploy your API on there and you can actually deploy and wired up to your dynamo DB Your RDX yes or your lambdas. So that's that's tough. That's a hard one and there's just no I would say there's cloud platforms that have emerged to help people like take a spreadsheet and deploy it as a as an API for kind of non user or non developers. But in my experience. While I wish they did most non developers could care less about the API deployment because even once they deploy that API they're like what's next. What do you do with it. So yeah it's it's a really tough one and while we're working at postmen to come up with ways of streamlining and helping developers do that. Yes it's still I think a untapped opportunity for for someone out there.
SPEAKER: M1
I actually just wanted to go off on a tangent because your your you have mentioned already in this interview and it's on a lot of your blogs this whole sort of skepticism about the Startup Machine.
SPEAKER: M8
I mean what I mean I do kind of understand where that comes from because I sort of from my with my my hat on is writing about a lot. I kind of somewhat share the same opinion as you but but I'm you know what. What do you think the main problem there is.
SPEAKER: M10
And I guess what would do you think some of the alternatives to it might be I think the.
SPEAKER: M5
The core problem gets. Why are you doing this and being honest about that. And that why.
SPEAKER: M4
You know it could be just as we were talking about with graph on a new shiny things you just like tech toys and want to play with the next thing. There's no tax on business purposes into doing this to be doing this purely to make money.
SPEAKER: M5
Which is fine. Look at me wrong. I mean you've got to make money in this.
SPEAKER: M4
But if that's not coupled with actually solving a real problem a business problem then that's probably not a good thing.
SPEAKER: M11
And if you're inventing problems along the way or creating new problems just so they can be solved and generate revenue you just really start hitting a whole host of problems that we just don't need. And I and I feel like we're we're really good at creating problems and we're not always so good at solving them. And I think though that investors are just fine with that. And I think some I.T. leaders and technical leaders are just fine with that. I don't think it's always the right answer and I don't think it's good for for end users always and it's good for our privacy and it's good for our security. So I think the core of but is just we got to get better at asking a Why are we doing this. Should we. And I would say no. No. No let's not do it. But suck at that.
SPEAKER: M1
Now I usually have one final question. I'm going to kind of ask you the same question twice with two different hats. So moving forward the next six months. First one would be what's planned for postmen. And the second would be what do you think is kind of the next six months to a year in AP eyes. Do you think trends designs will change. People will just keep relentlessly pushing forward to using other platforms it doesn't matter.
SPEAKER: M10
What's your predictions there. For postman it's it's very much.
SPEAKER: M11
API first really trying to help people think beyond a code first approach and that's our roadmap. That's our roadmap lead. We have a lot of lead a lot of features that are coming out that are trying to get people to move beyond just using SS as a request or a HP HDTV client and actually use us to create API design mock document test kind of that contract urban approach. But it's that's being led partially by our business model but mostly because it's it's a healthy way of thinking about API. If you can define a contract and then test and deploy and operate against that contract. That's that's smart that's that's efficient and can be designed first writing code for sets efficient you're going to save money is just definitely a lot of good things that can come out of that good discussions conversations feedback loops. So that's really the postman 2020 is is API first I would say just relied on that is getting more non developers as part involved in that process because having business stakeholders at least be able to not crack open postmen and participate in those conversations API first is really important. That's so that speeds up that business feedback loop. So that's that's all of 2020 that's going to be our biggest message as far as the API space I would say probably the event driven conversation coupled with GOPAC here it's going to dominate is how do you how do you deal to to speed API.
SPEAKER: M4
I guess as Google would put it is how do you define your rest api. But then also have Web books is kind of the one or one layer of event driven. And then how do you have you know Kafka Nats and then all the way to G.P.S. and build out channels topics as to a real time streaming API. And so that that because that's kind of a maturity point like this a lot of people who need that performance need that throughput that high volume of data. And so you'll see a lot of conversations like that and you know open API formerly known as swagger really dominates the rest api version that async API is overlaps with that and then covers the the vendor and Kafka. And being able to properly define design deploy and deliver your API and then document on top of both of those is I think really what you're going to hear a lot of drumbeat about in 2001.
SPEAKER: M1
That was my interview with the killing of postman okay my events calendar is warming up again. I actually have a few coming up over the next few months I will be going to foster him first weekend of February 1st and the second in Brussels. Think this is my fifth year now. And just before that also in Brussels I will be a sustained summit which covers sustaining open sales. I'd love to hear from anyone who's going to be that after that later in February. I'm actually going to be at make a comedy tech writers event in Jerusalem which will be interesting and at the moment I am also going to be at South by Southwest in middle of March back in Austin Texas to cover stuff there. So quite a few different places you can meet me I am cutting down on travel a little bit but I'm just selecting certain events that are interesting and important to me. So as you could see me up I've already spruiked a few of the articles I recently put out. And yeah early in the year. So still figuring out what my next priorities and activities are going to be. But the podcast will be continuing at least for the next few months in its current form. I might invigorate what it does in the near future but for now stay as it is I already have a few interviews edited and ready to put in the next episode. Take a look for those over the next few weeks but in the meantime if you love what you heard please write each of you share wherever you heard this podcast. Please head along to Crystal chill at dot com slash support to donate or buy merchandise or things like that and sign up for my newsletter. If you haven't already at Christian dot com slash newsletters until the next time. If you have been. Thank you very much for listening.