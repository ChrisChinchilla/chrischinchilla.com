---
import Layout from '~/layouts/PageLayoutNoBG.astro';
import Headline from '~/components/blog/Headline.astro';
import { PODCAST } from '~/config.mjs';
import Podcast from '../../components/Podcast.astro';
import { XMLParser } from 'fast-xml-parser';
import { Pagination } from 'accessible-astro-components';

// TODO: Feels odd to duplicate calls to API for generating each individual items and the pagination?
export function returnFeed(feedURL) {
  const options = {
    ignoreAttributes: false,
    attributeNamePrefix: 'att_',
    removeNSPrefix: true,
  };
  const parser = new XMLParser(options);

  return new Promise((resolve, reject) => {
    fetch(feedURL).then(async (feed) => {
      await feed.text().then(async (rssFeedData) => {
        let parsedFeed = await parser.parse(rssFeedData);
        resolve(parsedFeed);
      });
    });
  });
}
export async function getStaticPaths({ paginate }) {
  const wwwPod = await returnFeed('https://anchor.fm/s/ef311c90/podcast/rss');
  const csPod = await returnFeed('https://feeds.simplecast.com/whlwDbyc');

  let allEpisodes = wwwPod.rss.channel.item.concat(csPod.rss.channel.item);
  allEpisodes = allEpisodes.sort((a, b) => new Date(b.pubDate).valueOf() - new Date(a.pubDate).valueOf());

  return paginate(allEpisodes, {
    pageSize: PODCAST.postsPerPage,
  });
}

const { page } = Astro.props;
const meta = {
  title: 'Podcasts',
  description:
    'My pre-eminent podcast, Chinchilla Squeaks, has run for nearly eight years and taken me all over the globe. I have dabbled in other shows. They will be listed here again in the near future.',
  // canonical: post.canonical || url,
  // image: await findImage(post.image),
  // noindex: BLOG?.post?.noindex,
  // ogType: 'article',
};
---

<Layout {meta}>
  <section class="px-6 sm:px-6 py-6 sm:py-6 lg:py-6 mx-auto max-w-4xl">
    <Headline subtitle={meta.description}>
      {meta.title}
    </Headline>
    <ul>
      {
        page.data.map((episode) => (
          <>
            <li class="mb-12 md:mb-20">
              <Podcast podcast={episode} />
            </li>
          </>
        ))
      }
    </ul>

    <Pagination
      firstPage={page.url.prev ? '/podcast' : null}
      previousPage={page.url.prev ? page.url.prev : null}
      nextPage={page.url.next ? page.url.next : null}
      lastPage={page.url.next ? `/podcast/${Math.round(page.total / page.size)}` : null}
      currentPage={page.currentPage}
      totalPages={Math.round(page.total / page.size)}
    />
  </section>
</Layout>
